<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分层领域模型规约</title>
      <link href="/2019/08/20/fen-ceng-ling-yu-mo-xing-gui-yue/"/>
      <url>/2019/08/20/fen-ceng-ling-yu-mo-xing-gui-yue/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="分层领域模型规约："><a href="#分层领域模型规约：" class="headerlink" title="分层领域模型规约："></a>分层领域模型规约：</h1><ol><li>DO（ Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。</li><li>DTO（ Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。</li><li>BO（ Business Object）：业务对象。 由Service层输出的封装业务逻辑的对象。</li><li>AO（ Application Object）：应用对象。 在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li><li>VO（ View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。</li><li>POJO（ Plain Ordinary Java Object）：在本手册中， POJO专指只有setter/getter/toString的简单类，包括DO/DTO/BO/VO等。</li><li>Query：数据查询对象，各层接收上层的查询请求。 注意超过2个参数的查询封装，禁止使用Map类来传输。 </li></ol><h1 id="领域模型命名规约："><a href="#领域模型命名规约：" class="headerlink" title="领域模型命名规约："></a>领域模型命名规约：</h1><ol><li>数据对象：xxxDO，xxx即为数据表名。</li><li>数据传输对象：xxxDTO，xxx为业务领域相关的名称。</li><li>展示对象：xxxVO，xxx一般为网页名称。</li><li>POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/22/wei-shi-me-shi-yong-mq/"/>
      <url>/2019/07/22/wei-shi-me-shi-yong-mq/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列?"></a>为什么使用消息队列?</h1><ol><li>异步处理</li><li>系统解耦</li><li>流量削峰<h1 id="为什么要使用RabbitMQ？"><a href="#为什么要使用RabbitMQ？" class="headerlink" title="为什么要使用RabbitMQ？"></a>为什么要使用RabbitMQ？</h1></li><li>基于AMQP协议</li><li>填吐量达到万级</li><li>高并发（Elarng语言开发，高性能）</li><li>高性能</li><li>高可用</li><li>强大的社区支持，以及汗多公司都在使用</li><li>支持插件（监控管理的界面）</li><li>支持多语言<h1 id="RabbitMQ缺点"><a href="#RabbitMQ缺点" class="headerlink" title="RabbitMQ缺点"></a>RabbitMQ缺点</h1></li><li>Elarng语言开发，阅读修改困难</li><li>不是分布式的<h2 id="镜像集群模式（高可用）"><a href="#镜像集群模式（高可用）" class="headerlink" title="镜像集群模式（高可用）"></a>镜像集群模式（高可用）</h2>每个节点上都有这个queue的一个完整镜像，就是包含了queue的全部数据的意思<br>缺点：不是分布式的<h1 id="缺点、问题"><a href="#缺点、问题" class="headerlink" title="缺点、问题"></a>缺点、问题</h1></li><li>系统可用性降低，我都是生成环境遇到很多坑爹的问题<br> MQ一旦故障，系统A就没法发送消息到MQ了，然后其他系统也没办法消费到消息了。</li><li>导致系统要考虑的问题变多，进而导致系统复杂性变高<br> 系统A本来只需要发送一条数据给系统B，结果因为系统A和MQ之间协调出现一些问题，系统A不小心把同一条数据给系统B发送了两次，导致系统B内部插入了2条一模一样的数据</li><li>发送到消息队列张的数据丢失</li><li>怎么保证拿到的数据按顺序执行</li><li>生产事故，几百万的消息在消息队列里积压了几个小时</li><li>一致性问题，有人给系统A发送了个请求，本来这个请求应该是ABCD都执行成功才能返回结果，系统ABC执行都成功了，系统D执行失败了，导致整个请求给用户返回的是成功，结果后台逻辑实际还差了点，没有完全执行完。<br># </li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue框架学习笔记</title>
      <link href="/2019/07/22/vue-kuang-jia-xue-xi-bi-ji/"/>
      <url>/2019/07/22/vue-kuang-jia-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="vue框架学习笔记"><a href="#vue框架学习笔记" class="headerlink" title="vue框架学习笔记"></a>vue框架学习笔记</h1><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><h3 id="cdn-内容分发技术-在线引用"><a href="#cdn-内容分发技术-在线引用" class="headerlink" title="cdn(内容分发技术)在线引用"></a>cdn(内容分发技术)在线引用</h3><p>注意：cdn是在线引用框架或者库，如果没有网络，则出错，所以通常应用在生产环境。</p><p>制作原型或学习，你可以这样使用最新版本：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bashdelivr.net/npm/vue"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span></code></pre><p>如果项目要上线：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bashdelivr.net/npm/vue@2.6.10/dist/vue.bash"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="本地引入"><a href="#本地引入" class="headerlink" title="本地引入"></a>本地引入</h3><p>制作原型或学习，你可以这样使用最新版本：</p><p><a href="https://vuebash.org/bash/vue.bash" target="_blank" rel="noopener">请下载开发版本</a></p><p>如果项目要上线：</p><p><a href="https://vuebash.org/bash/vue.min.bash" target="_blank" rel="noopener">请下载生产版本</a></p><ol><li>vue框架文件下载完毕，则在文档的头部引入</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span>/title<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"bash/vue.bash"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span></code></pre><h2 id="快速了解vue框架"><a href="#快速了解vue框架" class="headerlink" title="快速了解vue框架"></a>快速了解vue框架</h2><h3 id="创建一个vue实例"><a href="#创建一个vue实例" class="headerlink" title="创建一个vue实例"></a>创建一个vue实例</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>//1. 创建一个vue实例，这样div<span class="token comment" spellcheck="true">#root元素及其子元素则可以使用vue各项特性。</span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="vue特性"><a href="#vue特性" class="headerlink" title="vue特性"></a>vue特性</h3><h4 id="lt-￼0-gt-大胡子-内可以计算表达式"><a href="#lt-￼0-gt-大胡子-内可以计算表达式" class="headerlink" title="(大胡子)内可以计算表达式"></a><code></code>(大胡子)内可以计算表达式</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>1+1*2/2*4<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'hello'</span>+20 <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'abcd'</span>.slice<span class="token punctuation">(</span>0,2<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>//1. 创建一个vue实例var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><p>单条件语句</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-if<span class="token operator">=</span><span class="token string">"age>=18"</span><span class="token operator">></span>成年<span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-else<span class="token operator">></span>未成年<span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>//1. 创建一个vue实例var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        age: 15    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>多条件语句</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-if<span class="token operator">=</span><span class="token string">"score&lt;60"</span><span class="token operator">></span>未及格<span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-else-if<span class="token operator">=</span><span class="token string">"score>=60 &amp;&amp; score&lt;=70"</span><span class="token operator">></span>及格<span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-else-if<span class="token operator">=</span><span class="token string">"score>70 &amp;&amp; score&lt;=80"</span><span class="token operator">></span>良好<span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-else-if<span class="token operator">=</span><span class="token string">"score>80 &amp;&amp; score&lt;=90"</span><span class="token operator">></span>优秀<span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-else<span class="token operator">></span>恰噶<span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>//1. 创建一个vue实例var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        score: 75    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><blockquote><p>特别注意：<code>v-if</code> 和 <code>v-else</code> 或者 <code>v-else-if</code> 直接不能插入其他任何标签，会报错。</p></blockquote><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button v-for<span class="token operator">=</span><span class="token string">"p in 5"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li v-for<span class="token operator">=</span><span class="token string">"name in navs"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>/ul<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>//1. 创建一个vue实例var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        navs: <span class="token punctuation">[</span><span class="token string">'首页'</span>,<span class="token string">'关于我们'</span>,<span class="token string">'产品中心'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>button v-on:click<span class="token operator">=</span><span class="token string">"fanzhuan()"</span><span class="token operator">></span>反转<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>//1. 创建一个vue实例var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        msg: <span class="token string">'今天的天气还不错！'</span>    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>        fanzhuan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            //this实际上就是vue的实例            this.msg <span class="token operator">=</span> this.msg.split<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>.reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>.join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>双向绑定用户输入框</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v-model<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>//1. 创建一个vue实例var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        username: <span class="token string">'张三2'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>//v-model//1. 绑定到 value，实现一刷新数据同步到value//2. 绑定到 input事件，实现数据输入时同步到value<span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><p>我们知道系统给我们提供的组件非常少，而且兼容性各大浏览器也是不一样，为了方便我们开发，我们可以采用vue开发工作组件，然后再系统界面构建过程中，通过组装的方式拼凑成一个完整界面，高效复用。</p><h2 id="Vue-实例"><a href="#Vue-实例" class="headerlink" title="Vue 实例"></a>Vue 实例</h2><h3 id="vue实例用途"><a href="#vue实例用途" class="headerlink" title="vue实例用途"></a>vue实例用途</h3><pre class=" language-bash"><code class="language-bash">var app <span class="token operator">=</span> new Vue<span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>vue实例用来创建一个控制模块，我们也可以创建多个实例，实现多个控制模块，但这样内存开销比较大，在开发者，通常一个vue实例就可以了。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root1"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>1+2<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root2"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>1+2<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root1 <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root1'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>var root2 <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root2'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="vue实例的选项参数介绍"><a href="#vue实例的选项参数介绍" class="headerlink" title="vue实例的选项参数介绍"></a>vue实例的选项参数介绍</h3><pre class=" language-bash"><code class="language-bash">var app <span class="token operator">=</span> new Vue<span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>//options 选项参数</code></pre><h4 id="el参数"><a href="#el参数" class="headerlink" title="el参数"></a>el参数</h4><p>用来绑定控制模块的元素选择器，通常用id来绑定，唯一，速度最快。</p><pre class=" language-bash"><code class="language-bash">var app <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="data参数"><a href="#data参数" class="headerlink" title="data参数"></a>data参数</h4><p>是vue实例开始运行是的初始化变量</p><pre class=" language-bash"><code class="language-bash">var app <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        msg: <span class="token string">'今天天气不错'</span>,        age: 20,        arr: <span class="token punctuation">[</span><span class="token string">'苹果'</span>,<span class="token string">'桔子'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意：不要在data里面做一些表达式计算，比如下面的写法是错误的</p><pre class=" language-bash"><code class="language-bash">var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        a: 1,        b: 2,        sum: this.a+this.b //错误，应该移到计算属性里面计算    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></blockquote><h4 id="methods参数"><a href="#methods参数" class="headerlink" title="methods参数"></a>methods参数</h4><p>事件处理时所调用的方法</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sub()"</span><span class="token operator">></span> - <span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> size<span class="token operator">=</span><span class="token string">"3"</span> v-model<span class="token operator">=</span><span class="token string">"count"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add()"</span><span class="token operator">></span> + <span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        count: 2    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>        sub<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            this.count --<span class="token punctuation">;</span>        <span class="token punctuation">}</span>,        add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            this.count ++<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="computed参数"><a href="#computed参数" class="headerlink" title="computed参数"></a>computed参数</h4><p><code>computed</code>计算属性是用来计算一些复杂的表达式，避免这些表达式直接写在模板中，导致模板过重，变得难于阅读。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>reverseText<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        msg: <span class="token string">'今天的天气不错！'</span>    <span class="token punctuation">}</span>,    computed: <span class="token punctuation">{</span>        reverseText: function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> this.msg.split<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>.reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>.join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="computed-和-methods-方法的区别"><a href="#computed-和-methods-方法的区别" class="headerlink" title="computed 和 methods 方法的区别"></a>computed 和 methods 方法的区别</h4><ol><li><p>计算属性调用不需要加括号，而方法调用需要加括号</p></li><li><p>计算属性不支持传参，而方法可以传参</p></li><li><p>计算属性会缓存计算结果，而方法不会缓存，每一次调用执行都会重新计算结果，虽然这个结果和上一次是完全一样的。</p></li><li><p>计算会高度复用，提交效率，节省重复不必要的计算，而方法重复计算，保证状态始终是最新的。</p></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>reverseText1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span>   <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>reverseText2<span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span>   <span class="token operator">&lt;</span>h4<span class="token operator">></span>当前时间：<span class="token punctuation">{</span><span class="token punctuation">{</span>now1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h4<span class="token operator">></span>   <span class="token operator">&lt;</span>h4<span class="token operator">></span>当前时间：<span class="token punctuation">{</span><span class="token punctuation">{</span>now2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h4<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"getNow()"</span><span class="token operator">></span>获取当前时间<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        msg: <span class="token string">'今天的天气不错！'</span>    <span class="token punctuation">}</span>,    computed: <span class="token punctuation">{</span>        reverseText1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> this.msg.split<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>.reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>.join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>,        now1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>        reverseText2<span class="token punctuation">(</span> msg <span class="token operator">=</span> this.msg <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> msg.split<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>.reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>.join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>,        now2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>,        getNow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console.log<span class="token punctuation">(</span><span class="token string">'计算属性'</span>, this.now1 <span class="token punctuation">)</span><span class="token punctuation">;</span>            console.log<span class="token punctuation">(</span><span class="token string">'方法'</span>, this.now2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="watch参数"><a href="#watch参数" class="headerlink" title="watch参数"></a>watch参数</h4><p>用户检测data中某个变量值的变化</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v-model<span class="token operator">=</span><span class="token string">"fullname"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        fullname: <span class="token string">'张三'</span>    <span class="token punctuation">}</span>,    watch: <span class="token punctuation">{</span>        fullname <span class="token punctuation">(</span> newVal, oldVal <span class="token punctuation">)</span><span class="token punctuation">{</span>            console.log<span class="token punctuation">(</span> newVal, oldVal <span class="token punctuation">)</span><span class="token punctuation">;</span>            //newVal 新的值，oldVal原来的值        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>过来输入框数字输入</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v-model<span class="token operator">=</span><span class="token string">"count"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        min: 0,        count: 1,        max: 10    <span class="token punctuation">}</span>,    watch: <span class="token punctuation">{</span>        count<span class="token punctuation">(</span> newVal, oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>            if<span class="token punctuation">(</span>newVal<span class="token operator">&lt;=</span> this.min<span class="token punctuation">)</span> this.count <span class="token operator">=</span> this.min<span class="token punctuation">;</span>            if<span class="token punctuation">(</span>newVal<span class="token operator">>=</span> this.max<span class="token punctuation">)</span> this.count <span class="token operator">=</span>  this.max<span class="token punctuation">;</span>            if<span class="token punctuation">(</span>/\D/.test<span class="token punctuation">(</span>newVal<span class="token punctuation">))</span> this.count <span class="token operator">=</span> oldVal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h4><p>vue 总共有8个声明周期（钩子）</p><h5 id="beforeCreate-创建之前"><a href="#beforeCreate-创建之前" class="headerlink" title="beforeCreate 创建之前"></a>beforeCreate 创建之前</h5><p>该钩子为创建之前，此时没有办法调用<code>data</code>和计算属性中的变量，方法中的函数也无法调用。<br>该构造函数通常用来设置<code>loading</code>，或者用来加载后端接口数据。</p><pre class=" language-bash"><code class="language-bash">var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        msg:<span class="token string">'你好'</span>    <span class="token punctuation">}</span>,    computed:<span class="token punctuation">{</span>        age<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> 22<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    beforeCreate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span> this.msg, this.age <span class="token punctuation">)</span><span class="token punctuation">;</span>//输出 undefined undefined    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="created-创建之后"><a href="#created-创建之后" class="headerlink" title="created 创建之后"></a>created 创建之后</h5><p>该钩子为创建之后，此时可以调用<code>data</code>和计算属性的变量，方法中的函数也初始化好了，可以调用，可以用来加载后端接口或者设置<code>loading</code>。</p><pre class=" language-bash"><code class="language-bash">var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        msg:<span class="token string">'你好'</span>    <span class="token punctuation">}</span>,    computed:<span class="token punctuation">{</span>        age<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> 22<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    created<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span> this.msg, this.age <span class="token punctuation">)</span><span class="token punctuation">;</span>//输出 你好 22    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="beforeMount-挂载之前"><a href="#beforeMount-挂载之前" class="headerlink" title="beforeMount 挂载之前"></a>beforeMount 挂载之前</h5><p>该钩子为挂载之前，此时<code>data</code>、计算属性、方法中的各项数据均已初始化完毕，可以取值和调用，但是并没有把数据同步到模板中（比如覆盖<code></code>大胡子占位符）。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v-bash<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        btn: <span class="token string">'&lt;button id="btn">按钮&lt;/button>'</span>    <span class="token punctuation">}</span>,    beforeMount<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span><span class="token string">'挂载之前'</span>, document.getElementById<span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        //输出null 上方获取不到按钮原生对象，因为代码还没有插入到页面当中去。    <span class="token punctuation">}</span>,<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h5 id="mounted-挂载之后"><a href="#mounted-挂载之后" class="headerlink" title="mounted 挂载之后"></a>mounted 挂载之后</h5><p>该钩子为挂载之后，此时已经做好了各项的计算，已经把数据和dom同步了或者说绑定了。<br>此时操作dom，最安全。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v-bash<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        btn: <span class="token string">'&lt;button id="btn">按钮&lt;/button>'</span>    <span class="token punctuation">}</span>,    mounted<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span><span class="token string">'挂载之后'</span>, document.getElementById<span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        //输出 按钮原生对象    <span class="token punctuation">}</span>,<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h5 id="beforeUpdate-更新之前"><a href="#beforeUpdate-更新之前" class="headerlink" title="beforeUpdate 更新之前"></a>beforeUpdate 更新之前</h5><p>注意该钩子函数，必须数据是有变化才会触发，所有一刷新的时候，它并没有触发，因为没有变化。</p><pre class=" language-bash"><code class="language-bash">var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        btn: <span class="token string">'&lt;button id="btn">按钮&lt;/button>'</span>    <span class="token punctuation">}</span>,    beforeUpdate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span><span class="token string">'更新之前'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h5 id="updated-更新之后"><a href="#updated-更新之后" class="headerlink" title="updated 更新之后"></a>updated 更新之后</h5><p>注意该钩子函数，必须数据是有变化才会触发，所有一刷新的时候，它并没有触发，因为没有变化。</p><pre class=" language-bash"><code class="language-bash">var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        btn: <span class="token string">'&lt;button id="btn">按钮2&lt;/button>'</span>    <span class="token punctuation">}</span>,    updated<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span><span class="token string">'更新之后'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="beforeDestroy-销毁之前"><a href="#beforeDestroy-销毁之前" class="headerlink" title="beforeDestroy 销毁之前"></a>beforeDestroy 销毁之前</h5><p>此钩子为销毁之前，通常创建一个vue实例，那么这个实例会常驻内存，监控data中的变量变化，一旦发生变化，则会同步数据到模板中，这种响应数据，并且将数据同步到dom中，这种思想我们通常叫做<code>MVVM</code>思想。</p><p>M：model 数据模型，简单理解 它是 data里面的变量<br>V：view 视图，简单理解 它是模板<br>VM：虚拟DOM，绑定数据和dom，让你不再管理dom，你只需要负责维护数据即可。</p><p>销毁，就是让上面的监听失效。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>button v-on:click<span class="token operator">=</span><span class="token string">"xiaohui()"</span><span class="token operator">></span>销毁监听<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        msg:<span class="token string">'张三'</span>    <span class="token punctuation">}</span>,    beforeDestroy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span><span class="token string">'销毁之前'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>,    destroyed<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span><span class="token string">'销毁之后'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>        xiaohui<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root.<span class="token variable">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h5 id="destroyed-销毁之后"><a href="#destroyed-销毁之后" class="headerlink" title="destroyed 销毁之后"></a>destroyed 销毁之后</h5><p>实例销毁后调用。调用后，<code>Vue</code>实例指示的所有东西都<strong>会解绑定</strong>，所有的<strong>事件监听器会被移除</strong>，所有的子实例也会被<strong>销毁</strong>。</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><p>插值通常使用<code></code>大胡子语法，下面的<code></code>就是一个插值</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        msg:<span class="token string">'张三'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h3><p>还是推荐使用大胡子写法</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-text<span class="token operator">=</span><span class="token string">"msg"</span><span class="token operator">></span><span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>hr<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>bash<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-text<span class="token operator">=</span><span class="token string">"bash"</span><span class="token operator">></span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        msg:<span class="token string">'张三'</span>,        bash: <span class="token string">'&lt;p>段落&lt;/p>'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="v-bash指令"><a href="#v-bash指令" class="headerlink" title="v-bash指令"></a>v-bash指令</h3><p>当我们想把 data中的某个变量，这个变量里面包含bash代码，我们想解析这个bash代码。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v-bash<span class="token operator">=</span><span class="token string">"p"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el: <span class="token string">'#root'</span>,        data: <span class="token punctuation">{</span>            p: <span class="token string">'&lt;p>段落&lt;/p>'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="v-once-指令"><a href="#v-once-指令" class="headerlink" title="v-once 指令"></a>v-once 指令</h3><p>该指令只响应数据一次，之后则不会再更新。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-once<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el: <span class="token string">'#root'</span>,        data: <span class="token punctuation">{</span>            msg: <span class="token string">'张三'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="v-bind-指令"><a href="#v-bind-指令" class="headerlink" title="v-bind 指令"></a>v-bind 指令</h3><p>该指令用于绑定bash特性或者自定义的属性，特性分静态的，动态的。v-bind的目的就是把静态的特性改变为动态特性</p><p>以下代码是错误的</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"{{id}}"</span><span class="token operator">></span>标题2<span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><blockquote><p>注意：大胡子语法不能用特性(属性)上面</p></blockquote><p>为了解决上面的问题，引申出<code>v-bind</code>指令</p><blockquote><p>注意：如果特性是字符串数字(例如<code>&#39;20&#39;</code>)，那么v-bind会自动将它转换为数字</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>--        错误的写法        <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"{{ID}}"</span><span class="token operator">></span>标题2<span class="token operator">&lt;</span>/h2<span class="token operator">></span>    --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 正确的写法 --<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-bind:id<span class="token operator">=</span><span class="token string">"ID"</span><span class="token operator">></span>标题2<span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el: <span class="token string">'#root'</span>,        data: <span class="token punctuation">{</span>            ID: <span class="token string">'user2'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-bind:id<span class="token operator">=</span><span class="token string">"'item'+myid"</span><span class="token operator">></span>标题2<span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- v-bind缩写形式如下 --<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 :id<span class="token operator">=</span><span class="token string">"'item'+myid"</span><span class="token operator">></span>标题3<span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el: <span class="token string">'#root'</span>,        data:<span class="token punctuation">{</span>            myid: 8        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="v-on-指令"><a href="#v-on-指令" class="headerlink" title="v-on 指令"></a>v-on 指令</h3><p>绑定事件要注意和原生态绑定之间的区别</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"alert('原生')"</span><span class="token operator">></span>原生<span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>button v-on:click<span class="token operator">=</span><span class="token string">"alert('vue')"</span><span class="token operator">></span>vue<span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- v-on缩写形式如下 --<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"alert('vue')"</span><span class="token operator">></span>vue<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el: <span class="token string">'#root'</span>,        methods: <span class="token punctuation">{</span>            alert<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>                alert<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><h4 id="阻止默认动作"><a href="#阻止默认动作" class="headerlink" title="阻止默认动作"></a>阻止默认动作</h4><p><code>.prevent</code> 用来阻止默认动作，比如右键菜单，提交表单，超级链接等<br>原生态阻止默认动作，采用<code>event.preventDefault()</code></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button v-on:contextmenu.prevent<span class="token operator">=</span><span class="token string">"rightMenu"</span><span class="token operator">></span>右击<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el: <span class="token string">'#root'</span>,        methods: <span class="token punctuation">{</span>            rightMenu<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                // e.preventDefaults<span class="token punctuation">(</span><span class="token punctuation">)</span>                console.log<span class="token punctuation">(</span><span class="token string">'您单击了右键！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h4><p><code>.stop</code> 用来阻止冒泡</p><p>原生态阻止冒泡通常是 采用 <code>event.stopPropagation()</code>。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"bigHit()"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button @click.stop<span class="token operator">=</span><span class="token string">"smallHit()"</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el: <span class="token string">'#root'</span>,        methods: <span class="token punctuation">{</span>            bigHit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console.log<span class="token punctuation">(</span><span class="token string">'大单击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>,            smallHit<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                // e.stopPropagation<span class="token punctuation">(</span><span class="token punctuation">)</span>                console.log<span class="token punctuation">(</span><span class="token string">'小单击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h3><p>双向绑定表单</p><ol><li>绑定表单的默认值<code>value</code>、<code>checked</code>或者<code>selected</code>。</li><li>绑定输入状态 <code>oninput</code>、<code>onchange</code>。</li></ol><h4 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h4><h5 id="number-数字"><a href="#number-数字" class="headerlink" title="number 数字"></a>number 数字</h5><p>默认情况下v-model读取到的值是字符串类型</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v-model.number<span class="token operator">=</span><span class="token string">"count"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>count+5<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el: <span class="token string">'#root'</span>,        data: <span class="token punctuation">{</span>            count: 0        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h5 id="lazy-懒惰的"><a href="#lazy-懒惰的" class="headerlink" title="lazy 懒惰的"></a>lazy 懒惰的</h5><p><code>lazy</code> 相当于 <code>onchange</code>事件</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v-model.number.lazy<span class="token operator">=</span><span class="token string">"count"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>count+5<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el: <span class="token string">'#root'</span>,        data: <span class="token punctuation">{</span>            count: 0        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><h3 id="绑定-Class"><a href="#绑定-Class" class="headerlink" title="绑定 Class"></a>绑定 Class</h3><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 <code>class</code></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div v-bind:class<span class="token operator">=</span><span class="token string">"{ active: isActive }"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><p>上面的<code>active</code>类名，而<code>isActive</code>是一个变量，它有布尔特性</p><p>什么布尔特性？</p><ol><li><code>&#39;&#39;</code>隐式解析为false</li><li><code>0</code>隐式解析为false</li><li><code>null</code>隐式解析为false</li><li><code>false</code></li><li><code>undefined</code>隐式解析为false</li><li><code>NaN</code>隐式解析为false</li><li>比较运算也产生布尔值</li></ol><p>综合例子</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>style<span class="token operator">></span>button.active<span class="token punctuation">{</span>  color: red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button    v-for<span class="token operator">=</span><span class="token string">"p in 5"</span>    v-bind:class<span class="token operator">=</span><span class="token string">"{active:p==page}"</span>    v-on:click<span class="token operator">=</span><span class="token string">"goPage(p)"</span>    <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        page: 3    <span class="token punctuation">}</span>,    methods:<span class="token punctuation">{</span>        goPage<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>            this.page <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>综合例子2</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>style<span class="token operator">></span>div.box<span class="token punctuation">{</span>  width: 220px<span class="token punctuation">;</span>  height: 500px<span class="token punctuation">;</span>  background-color: <span class="token comment" spellcheck="true">#000;</span>  transition: all .3s ease-in<span class="token punctuation">;</span><span class="token punctuation">}</span>div.box.active<span class="token punctuation">{</span>    width: 0<span class="token punctuation">;</span>    transition: all .3s ease-out<span class="token punctuation">;</span><span class="token punctuation">}</span>button<span class="token punctuation">{</span>    position: fixed<span class="token punctuation">;</span>    right: 20px<span class="token punctuation">;</span>    top: 20px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"box"</span> :class<span class="token operator">=</span><span class="token string">"{active:opened}"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>button v-on:click<span class="token operator">=</span><span class="token string">"opened = !opened"</span><span class="token operator">></span>切换导航<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        opened: <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="绑定-Style-样式"><a href="#绑定-Style-样式" class="headerlink" title="绑定 Style 样式"></a>绑定 Style 样式</h3><h4 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div v-bind:style<span class="token operator">=</span><span class="token string">"{ color: activeColor, fontSize: fontSize + 'px' }"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><p>综合例子</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h4 :style<span class="token operator">=</span><span class="token string">"h4Style"</span><span class="token operator">></span>标题<span class="token operator">&lt;</span>/h4<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"number"</span> v-model<span class="token operator">=</span><span class="token string">"size"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select v-model<span class="token operator">=</span><span class="token string">"font"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>请选择<span class="token operator">&lt;</span>/option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"华文行楷"</span><span class="token operator">></span>华文行楷<span class="token operator">&lt;</span>/option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"方正舒体"</span><span class="token operator">></span>方正舒体<span class="token operator">&lt;</span>/option<span class="token operator">></span>    <span class="token operator">&lt;</span>/select<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        font: <span class="token string">''</span>,        size: 24    <span class="token punctuation">}</span>,    computed: <span class="token punctuation">{</span>        h4Style<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>fontSize: this.size+<span class="token string">'px'</span>,fontFamily: this.font<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>拖拽效果演示</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>style<span class="token operator">></span>.box<span class="token punctuation">{</span>    position: fixed<span class="token punctuation">;</span>    background-color: red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div    class<span class="token operator">=</span><span class="token string">"box"</span>    :style<span class="token operator">=</span><span class="token string">"boxStyle"</span>    @mousedown <span class="token operator">=</span> <span class="token string">"drag"</span>    <span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        width: 100,        height: 100,        left: 20,        top: 20    <span class="token punctuation">}</span>,    computed: <span class="token punctuation">{</span>        boxStyle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                width: this.width+<span class="token string">'px'</span>,                height: this.height+<span class="token string">'px'</span>,                left: this.left+<span class="token string">'px'</span>,                top: this.top+<span class="token string">'px'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    methods:<span class="token punctuation">{</span>        drag<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            var startX <span class="token operator">=</span> e.clientX<span class="token punctuation">;</span>            var startY <span class="token operator">=</span> e.clientY<span class="token punctuation">;</span>            var left <span class="token operator">=</span> this.left<span class="token punctuation">;</span>            var <span class="token function">top</span> <span class="token operator">=</span> this.top<span class="token punctuation">;</span>            var maxLeft <span class="token operator">=</span> window.innerWidth - this.width<span class="token punctuation">;</span>            var maxTop <span class="token operator">=</span> window.innerHeight - this.height<span class="token punctuation">;</span>            document.onmousemove <span class="token operator">=</span> function<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e.preventDefault<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                var distX <span class="token operator">=</span>  left + <span class="token punctuation">(</span>e.clientX - startX<span class="token punctuation">)</span><span class="token punctuation">;</span>                var distY <span class="token operator">=</span>  <span class="token function">top</span> + <span class="token punctuation">(</span>e.clientY - startY<span class="token punctuation">)</span><span class="token punctuation">;</span>                if<span class="token punctuation">(</span>distX<span class="token operator">&lt;=</span>0<span class="token punctuation">)</span>distX<span class="token operator">=</span>0<span class="token punctuation">;</span>                if<span class="token punctuation">(</span>distY<span class="token operator">&lt;=</span>0<span class="token punctuation">)</span>distY<span class="token operator">=</span>0<span class="token punctuation">;</span>                if<span class="token punctuation">(</span>distX<span class="token operator">>=</span>maxLeft<span class="token punctuation">)</span>distX<span class="token operator">=</span>maxLeft<span class="token punctuation">;</span>                if<span class="token punctuation">(</span>distY<span class="token operator">>=</span>maxTop<span class="token punctuation">)</span>distY<span class="token operator">=</span>maxTop<span class="token punctuation">;</span>                this.left <span class="token operator">=</span> distX<span class="token punctuation">;</span>                this.top <span class="token operator">=</span> distY<span class="token punctuation">;</span>            <span class="token punctuation">}</span>.bind<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>            document.onmouseup <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                document.onmousemove <span class="token operator">=</span> null<span class="token punctuation">;</span>                document.onmouseup <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>滑块效果演示</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>style<span class="token operator">></span>.range<span class="token punctuation">{</span>    position: relative<span class="token punctuation">;</span>    background-color: <span class="token comment" spellcheck="true">#ccc;</span>    overflow: hidden<span class="token punctuation">;</span><span class="token punctuation">}</span>.range i,.range b<span class="token punctuation">{</span>    display: block<span class="token punctuation">;</span><span class="token punctuation">}</span>.range b<span class="token punctuation">{</span>    height: 100%<span class="token punctuation">;</span>    background-color: green<span class="token punctuation">;</span><span class="token punctuation">}</span>.range i<span class="token punctuation">{</span>    position: absolute<span class="token punctuation">;</span>    height: 100%<span class="token punctuation">;</span>    background-color: black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"range"</span> :style<span class="token operator">=</span><span class="token string">"rangeStyle"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i :style<span class="token operator">=</span><span class="token string">"iStyle"</span> @mousedown<span class="token operator">=</span><span class="token string">"drag"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span>        <span class="token operator">&lt;</span>b :style<span class="token operator">=</span><span class="token string">"bStyle"</span><span class="token operator">></span><span class="token operator">&lt;</span>/b<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"bash/vue.bash"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        radius: false,        rWidth: 800,        rHeight: 100,        iWidth: 100,        left: 0    <span class="token punctuation">}</span>,    computed: <span class="token punctuation">{</span>        rangeStyle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                borderRadius:  this.radius <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>this.rHeight/2 + <span class="token string">'px'</span><span class="token punctuation">)</span>,                width: this.rWidth+<span class="token string">'px'</span>,                height: this.rHeight+<span class="token string">'px'</span>,            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        iStyle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                borderRadius:  this.radius <span class="token operator">&amp;&amp;</span> <span class="token string">'50%'</span>,                width: this.iWidth+<span class="token string">'px'</span>,                left: this.left+<span class="token string">'px'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        bStyle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                width: this.left+<span class="token punctuation">(</span>this.iWidth/2<span class="token punctuation">)</span>+<span class="token string">'px'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    methods:<span class="token punctuation">{</span>        drag<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            var startX <span class="token operator">=</span> e.clientX<span class="token punctuation">;</span>            var left <span class="token operator">=</span> this.left<span class="token punctuation">;</span>            var maxLeft <span class="token operator">=</span> this.rWidth - this.iWidth<span class="token punctuation">;</span>            document.onmousemove <span class="token operator">=</span> function<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                var _left <span class="token operator">=</span> left + <span class="token punctuation">(</span>e.clientX - startX<span class="token punctuation">)</span><span class="token punctuation">;</span>                if<span class="token punctuation">(</span>_left<span class="token operator">&lt;=</span>0<span class="token punctuation">)</span>_left<span class="token operator">=</span>0<span class="token punctuation">;</span>                if<span class="token punctuation">(</span>_left<span class="token operator">>=</span>maxLeft<span class="token punctuation">)</span>_left<span class="token operator">=</span>maxLeft<span class="token punctuation">;</span>                this.left <span class="token operator">=</span> _left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>.bind<span class="token punctuation">(</span>this<span class="token punctuation">)</span>            document.onmouseup <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                document.onmousemove <span class="token operator">=</span> null<span class="token punctuation">;</span>                document.onmouseup <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-if<span class="token operator">=</span><span class="token string">"visible"</span><span class="token operator">></span>标题2<span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"visible = !visible"</span><span class="token operator">></span>显隐<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        visible: <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="v-if-和-v-show的区别"><a href="#v-if-和-v-show的区别" class="headerlink" title="v-if 和 v-show的区别"></a>v-if 和 v-show的区别</h3><p><code>v-if</code>会重建节点，它是惰性的，也就是说如果条件为假，那么它什么也不做，不会渲染节点。</p><p><code>v-show</code>无论条件真或假，它都会渲染节点。</p><p>一般来说，<code>v-if</code>性能开销大一点，<code>v-show</code>性能开销少一些。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-if<span class="token operator">=</span><span class="token string">"visible"</span><span class="token operator">></span>标题v-if<span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 v-show<span class="token operator">=</span><span class="token string">"visible"</span><span class="token operator">></span>标题v-show<span class="token operator">&lt;</span>/h2<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"visible = !visible"</span><span class="token operator">></span>显隐<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        visible: <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="v-else-否则"><a href="#v-else-否则" class="headerlink" title="v-else 否则"></a>v-else 否则</h3><p>否则语句，注意不需要条件</p><blockquote><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p></blockquote><h3 id="v-else-if-否则如果"><a href="#v-else-if-否则如果" class="headerlink" title="v-else-if 否则如果"></a>v-else-if 否则如果</h3><p>否则如果</p><blockquote><p>类似于 <code>v-else</code>，<code>v-else-if</code> 也必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后。</p></blockquote><h3 id="template-标签在条件语句中的应用"><a href="#template-标签在条件语句中的应用" class="headerlink" title="template 标签在条件语句中的应用"></a>template 标签在条件语句中的应用</h3><p><code>template</code>标签不会被浏览器解析出来，它在<code>v-if</code>和<code>v-for</code>中很实用。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>template v-if<span class="token operator">=</span><span class="token string">"num==0"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>标题1<span class="token operator">&lt;</span>/h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>段落1<span class="token operator">&lt;</span>/p<span class="token operator">></span>    <span class="token operator">&lt;</span>/template<span class="token operator">></span>    <span class="token operator">&lt;</span>template v-if<span class="token operator">=</span><span class="token string">"num==1"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>标题2<span class="token operator">&lt;</span>/h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>段落2<span class="token operator">&lt;</span>/p<span class="token operator">></span>    <span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        num: 0    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="key-特性"><a href="#key-特性" class="headerlink" title="key 特性"></a>key 特性</h3><p><code>Vue</code> 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做使 <code>Vue</code> 变得非常快。</p><p>但这样也不总是符合实际需求，所以 <code>Vue</code> 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们，那就是定义<code>key</code>。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"type='email'"</span><span class="token operator">></span>邮箱<span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"type='mobile'"</span><span class="token operator">></span>手机<span class="token operator">&lt;</span>/button<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>div v-if<span class="token operator">=</span><span class="token string">"type=='email'"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>邮箱登录<span class="token operator">&lt;</span>/label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入邮箱"</span> key<span class="token operator">=</span><span class="token string">"emial"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>div v-if<span class="token operator">=</span><span class="token string">"type=='mobile'"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>手机登录<span class="token operator">&lt;</span>/label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入手机"</span> key<span class="token operator">=</span><span class="token string">"mobile"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        type: <span class="token string">'email'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h2 id="循环语句-1"><a href="#循环语句-1" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="循环数字"><a href="#循环数字" class="headerlink" title="循环数字"></a>循环数字</h3><p>循环从1开始计数，注意不支持小数步进</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button v-for<span class="token operator">=</span><span class="token string">"p in 5"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="循环数组"><a href="#循环数组" class="headerlink" title="循环数组"></a>循环数组</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li v-for<span class="token operator">=</span><span class="token string">"item in ['苹果','香蕉']"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>/ul<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>上面的代码让模板变得过重，难于阅读，应该把数组提取到data中去</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li v-for<span class="token operator">=</span><span class="token string">"item in shuiguo"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>/ul<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        shuiguo: <span class="token punctuation">[</span><span class="token string">'苹果'</span>,<span class="token string">'香蕉'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="如何拿到数组的索引值"><a href="#如何拿到数组的索引值" class="headerlink" title="如何拿到数组的索引值"></a>如何拿到数组的索引值</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li v-for<span class="token operator">=</span><span class="token string">"item,index in shuiguo"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span> - <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>/ul<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        shuiguo: <span class="token punctuation">[</span><span class="token string">'苹果'</span>,<span class="token string">'香蕉'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>一个非常典型的循环数据示例</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li v-for<span class="token operator">=</span><span class="token string">"item in navs"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a :href<span class="token operator">=</span><span class="token string">"item.url"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item.title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/a<span class="token operator">></span>        <span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>/ul<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        navs: <span class="token punctuation">[</span>            <span class="token punctuation">{</span> id:1, title:<span class="token string">'首页'</span>, url: <span class="token string">'index.bash'</span><span class="token punctuation">}</span>,            <span class="token punctuation">{</span> id:2, title:<span class="token string">'关于我们'</span>, url: <span class="token string">'about.bash'</span><span class="token punctuation">}</span>,            <span class="token punctuation">{</span> id:3, title:<span class="token string">'联系我们'</span>, url: <span class="token string">'contact.bash'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="循环对象"><a href="#循环对象" class="headerlink" title="循环对象"></a>循环对象</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p v-for<span class="token operator">=</span><span class="token string">"val,key,index in person"</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span> - <span class="token punctuation">{</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span><span class="token punctuation">}</span> - <span class="token punctuation">{</span><span class="token punctuation">{</span>val<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        person: <span class="token punctuation">{</span>            name: <span class="token string">'李四'</span>,            age: 33,            habby: <span class="token string">'骑行'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="template在循环中的应用"><a href="#template在循环中的应用" class="headerlink" title="template在循环中的应用"></a>template在循环中的应用</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>template v-for<span class="token operator">=</span><span class="token string">"item in person"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item.name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span>item.age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>            爱好：<span class="token punctuation">{</span><span class="token punctuation">{</span>item.habby<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>/p<span class="token operator">></span>    <span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        person: <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                name: <span class="token string">'张三'</span>,                age: 28,                habby: <span class="token string">'唱歌'</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                name: <span class="token string">'李四'</span>,                age: 33,                habby: <span class="token string">'骑行'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><h3 id="数组变异的方法有那些"><a href="#数组变异的方法有那些" class="headerlink" title="数组变异的方法有那些"></a>数组变异的方法有那些</h3><ol><li><code>push</code> 尾部追加，返回数组长度。</li><li><code>unshift</code> 开头追加，返回数组长度。</li><li><code>pop</code> 删除尾部成员，返回被删除的成员。</li><li><code>shift</code> 删除头部成员，返回被删除的成员。</li><li><code>sort</code> 排序，返回排序后的数组。</li><li><code>splice</code> 集<code>增删改</code>数组管理</li><li><code>reverse</code> 反转，返回改变后的数组。</li></ol><h3 id="数组非变异的方法有那些"><a href="#数组非变异的方法有那些" class="headerlink" title="数组非变异的方法有那些"></a>数组非变异的方法有那些</h3><ol><li><code>concat</code> 连接数组，返回新数组。</li><li><code>slice</code> 切割数组，切割出新数组。</li><li><code>map</code> 映射数组，映射出新数组。</li><li><code>filter</code> 筛选数组，筛选出新数组。</li></ol><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button v-on:click<span class="token operator">=</span><span class="token string">"count++"</span><span class="token operator">></span>❤ <span class="token punctuation">{</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        count: 1    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="bash5本地存储"><a href="#bash5本地存储" class="headerlink" title="bash5本地存储"></a>bash5本地存储</h3><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>购物车</li><li>浏览记录</li><li>记住密码或者用户名</li><li>保存登录令牌<code>token</code></li><li>离线缓存数据</li></ol><h4 id="sessionStorage-会话存储"><a href="#sessionStorage-会话存储" class="headerlink" title="sessionStorage 会话存储"></a>sessionStorage 会话存储</h4><p>指页面打开的时候数据都在，一旦页面关闭，数据清除。</p><h5 id="sessionStorage-setItem-设置存储"><a href="#sessionStorage-setItem-设置存储" class="headerlink" title="sessionStorage.setItem 设置存储"></a>sessionStorage.setItem 设置存储</h5><pre class=" language-bash"><code class="language-bash">sessionStorage.setItem<span class="token punctuation">(</span><span class="token string">'存储名'</span>,<span class="token string">'存储值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="sessionStorage-getItem-获取已经存储的值"><a href="#sessionStorage-getItem-获取已经存储的值" class="headerlink" title="sessionStorage.getItem 获取已经存储的值"></a>sessionStorage.getItem 获取已经存储的值</h5><pre class=" language-bash"><code class="language-bash">sessionStorage.getItem<span class="token punctuation">(</span><span class="token string">'存储名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="sessionStorage-removeItem-移除已经存储的值"><a href="#sessionStorage-removeItem-移除已经存储的值" class="headerlink" title="sessionStorage.removeItem 移除已经存储的值"></a>sessionStorage.removeItem 移除已经存储的值</h5><pre class=" language-bash"><code class="language-bash">sessionStorage.removeItem<span class="token punctuation">(</span><span class="token string">'存储名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="sessionStorage-clear-清空所有的值"><a href="#sessionStorage-clear-清空所有的值" class="headerlink" title="sessionStorage.clear 清空所有的值"></a>sessionStorage.clear 清空所有的值</h5><pre class=" language-bash"><code class="language-bash">sessionStorage.clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="localStorage-会话存储"><a href="#localStorage-会话存储" class="headerlink" title="localStorage 会话存储"></a>localStorage 会话存储</h4><p>本地永久存储，也就是说除非你人为手动去清除，一般它都在。</p><h5 id="localStorage-setItem-设置存储"><a href="#localStorage-setItem-设置存储" class="headerlink" title="localStorage.setItem 设置存储"></a>localStorage.setItem 设置存储</h5><pre class=" language-bash"><code class="language-bash">localStorage.setItem<span class="token punctuation">(</span><span class="token string">'存储名'</span>,<span class="token string">'存储值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="localStorage-getItem-获取已经存储的值"><a href="#localStorage-getItem-获取已经存储的值" class="headerlink" title="localStorage.getItem 获取已经存储的值"></a>localStorage.getItem 获取已经存储的值</h5><pre class=" language-bash"><code class="language-bash">localStorage.getItem<span class="token punctuation">(</span><span class="token string">'存储名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="localStorage-removeItem-移除已经存储的值"><a href="#localStorage-removeItem-移除已经存储的值" class="headerlink" title="localStorage.removeItem 移除已经存储的值"></a>localStorage.removeItem 移除已经存储的值</h5><pre class=" language-bash"><code class="language-bash">localStorage.removeItem<span class="token punctuation">(</span><span class="token string">'存储名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="localStorage-clear-清空所有的值"><a href="#localStorage-clear-清空所有的值" class="headerlink" title="localStorage.clear 清空所有的值"></a>localStorage.clear 清空所有的值</h5><pre class=" language-bash"><code class="language-bash">localStorage.clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>综合示例</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add()"</span><span class="token operator">></span>添加<span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"clear()"</span><span class="token operator">></span>清空<span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li v-for<span class="token operator">=</span><span class="token string">"item,index in list"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>item.name<span class="token punctuation">}</span><span class="token punctuation">}</span> ---- <span class="token punctuation">{</span><span class="token punctuation">{</span>item.age<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"del(index)"</span><span class="token operator">></span>移除<span class="token operator">&lt;</span>/button<span class="token operator">></span>        <span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>/ul<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var list <span class="token operator">=</span> localStorage.getItem<span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        list: list ? bashON.parse<span class="token punctuation">(</span>list<span class="token punctuation">)</span>:<span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>,    methods:<span class="token punctuation">{</span>        add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            var name <span class="token operator">=</span> prompt<span class="token punctuation">(</span><span class="token string">'请输入商品！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var age <span class="token operator">=</span> prompt<span class="token punctuation">(</span><span class="token string">'请输入价格！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            this.list.push<span class="token punctuation">(</span><span class="token punctuation">{</span>name,age<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>,        del<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>            // alert<span class="token punctuation">(</span>index<span class="token punctuation">)</span>            this.list.splice<span class="token punctuation">(</span>index,1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>,        clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            this.list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    updated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //注意如果是对象的话，要转成字符串，不然会出问题        var str <span class="token operator">=</span> bashON.stringify<span class="token punctuation">(</span> this.list <span class="token punctuation">)</span><span class="token punctuation">;</span>        localStorage.setItem<span class="token punctuation">(</span><span class="token string">'list'</span>, str <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><h4 id="once-只触发一次"><a href="#once-只触发一次" class="headerlink" title="once 只触发一次"></a>once 只触发一次</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button v-on:click.once<span class="token operator">=</span><span class="token string">"danji"</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    methods:<span class="token punctuation">{</span>        danji<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            alert<span class="token punctuation">(</span><span class="token string">'只能弹出一次哦！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="capture-使用捕获模式"><a href="#capture-使用捕获模式" class="headerlink" title="capture 使用捕获模式"></a>capture 使用捕获模式</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click.capture<span class="token operator">=</span><span class="token string">"dj1"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>b @click<span class="token operator">=</span><span class="token string">"dj2"</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span>/b<span class="token operator">></span>    <span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    methods:<span class="token punctuation">{</span>        dj1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console.log<span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>,        dj2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console.log<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="self-只在当前元素触发"><a href="#self-只在当前元素触发" class="headerlink" title="self 只在当前元素触发"></a>self 只在当前元素触发</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button <span class="token operator">></span>        <span class="token operator">&lt;</span>b @click.self<span class="token operator">=</span><span class="token string">"dj1"</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span>/b<span class="token operator">></span>    <span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    methods:<span class="token punctuation">{</span>        dj1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console.log<span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ul><li><code>enter</code>：回车键</li><li><code>tab</code>：换行键</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token string">"msg"</span> @keyup.enter<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var clipboard <span class="token operator">=</span> new Clipboard<span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    methods:<span class="token punctuation">{</span>        submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            this.<span class="token variable">$refs</span>.msg.select<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><p>表单输入绑定通常我们使用<code>v-model</code>双向绑定</p><h3 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a>单行文本框</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v-model<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        username: <span class="token string">'张三'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="多行文本框"><a href="#多行文本框" class="headerlink" title="多行文本框"></a>多行文本框</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>textarea v-model<span class="token operator">=</span><span class="token string">"msg"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/textarea<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        msg: <span class="token string">'暂无数据'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="单选下拉列表框"><a href="#单选下拉列表框" class="headerlink" title="单选下拉列表框"></a>单选下拉列表框</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select v-model<span class="token operator">=</span><span class="token string">"msg"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>请选择<span class="token operator">&lt;</span>/option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"本科"</span><span class="token operator">></span>本科<span class="token operator">&lt;</span>/option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"大专"</span><span class="token operator">></span>大专<span class="token operator">&lt;</span>/option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"中专"</span><span class="token operator">></span>中专<span class="token operator">&lt;</span>/option<span class="token operator">></span>    <span class="token operator">&lt;</span>/select<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        msg: <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="多行下拉列表框"><a href="#多行下拉列表框" class="headerlink" title="多行下拉列表框"></a>多行下拉列表框</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select multiple v-model<span class="token operator">=</span><span class="token string">"msg"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>请选择<span class="token operator">&lt;</span>/option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"本科"</span><span class="token operator">></span>本科<span class="token operator">&lt;</span>/option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"大专"</span><span class="token operator">></span>大专<span class="token operator">&lt;</span>/option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"中专"</span><span class="token operator">></span>中专<span class="token operator">&lt;</span>/option<span class="token operator">></span>    <span class="token operator">&lt;</span>/select<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el:<span class="token string">'#root'</span>,    data:<span class="token punctuation">{</span>        msg: <span class="token punctuation">[</span><span class="token string">'本科'</span>,<span class="token string">'中专'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> v-model<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"男"</span><span class="token operator">></span> 男    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> v-model<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"女"</span><span class="token operator">></span> 女    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>sex<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el: <span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        sex: <span class="token string">'女'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>默认单个复选框内置的值是布尔值，也就是真和假</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v-model<span class="token operator">=</span><span class="token string">"check"</span><span class="token operator">></span> 审核    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>check<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el: <span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        check: <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>上面的布尔值也不是每次都那么用，所有需要自定义真值和假值</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> true-value<span class="token operator">=</span><span class="token string">"真的"</span> false-value<span class="token operator">=</span><span class="token string">"假的"</span> v-model<span class="token operator">=</span><span class="token string">"check"</span><span class="token operator">></span> 审核    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>check<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el: <span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        check: <span class="token string">'真的'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>多个复选框取值、设值情况</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v-model<span class="token operator">=</span><span class="token string">"habby"</span> value<span class="token operator">=</span><span class="token string">"篮球"</span><span class="token operator">></span> 篮球    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v-model<span class="token operator">=</span><span class="token string">"habby"</span> value<span class="token operator">=</span><span class="token string">"足球"</span><span class="token operator">></span> 足球    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v-model<span class="token operator">=</span><span class="token string">"habby"</span> value<span class="token operator">=</span><span class="token string">"排球"</span><span class="token operator">></span> 排球    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>habby<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el: <span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        habby: <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>综合示例 全选反选</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"checkAll"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>txt<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/button<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>template v-for<span class="token operator">=</span><span class="token string">"val in list"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"checkbox"</span>        v-model<span class="token operator">=</span><span class="token string">"habby"</span>        :value<span class="token operator">=</span><span class="token string">"val"</span>        <span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>val<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var root <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el: <span class="token string">'#root'</span>,    data: <span class="token punctuation">{</span>        txt: <span class="token string">'全选'</span>,        list: <span class="token punctuation">[</span><span class="token string">'篮球'</span>,<span class="token string">'足球'</span>,<span class="token string">'排球'</span>,<span class="token string">'羽毛球'</span><span class="token punctuation">]</span>,        habby: <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>        checkAll<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            if<span class="token punctuation">(</span>this.txt<span class="token operator">==</span><span class="token string">'全选'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                this.txt <span class="token operator">=</span> <span class="token string">'反选'</span><span class="token punctuation">;</span>                this.habby <span class="token operator">=</span> this.list<span class="token punctuation">;</span>            <span class="token punctuation">}</span>else<span class="token punctuation">{</span>                this.txt <span class="token operator">=</span> <span class="token string">'全选'</span><span class="token punctuation">;</span>                this.habby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2019/07/11/wei-fu-wu/"/>
      <url>/2019/07/11/wei-fu-wu/</url>
      
        <content type="html"><![CDATA[<hr><p># </p><h1 id="什么是spring-cloud-框架"><a href="#什么是spring-cloud-框架" class="headerlink" title="什么是spring cloud 框架"></a>什么是spring cloud 框架</h1><p>spring cloud并不是一套全新的框架，是把针对微服务技术的解决方案整合到一起统一维护，品牌化宣传推广，使微服务技术大众化，降低微服务的门槛。<br>spring boot搭建为服务技术的基础框架</p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><pre><code>注册中心远程服务调用熔断器服务网关</code></pre><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>主要职责：发现服务和提供服务、维护服务</p><h2 id="注册中心的使用"><a href="#注册中心的使用" class="headerlink" title="注册中心的使用"></a>注册中心的使用</h2><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> spring-cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2019/07/08/redis-nei-cun-shu-ju-ku/"/>
      <url>/2019/07/08/redis-nei-cun-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。</p><h1 id="阿里云服务器安装redis"><a href="#阿里云服务器安装redis" class="headerlink" title="阿里云服务器安装redis"></a>阿里云服务器安装redis</h1><h1 id="centos版本"><a href="#centos版本" class="headerlink" title="centos版本"></a>centos版本</h1><pre><code>cat /etc/redhat-releaseCentOS Linux release 7.6.1810 (Core)</code></pre><h1 id="更新yum源"><a href="#更新yum源" class="headerlink" title="更新yum源"></a>更新yum源</h1><p>因为yum默认源软件不全或者版本过低，可以通过安装epel和remi源来安装最新版本的软件</p><h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><pre><code>yum install -y redis</code></pre><h1 id="redis基本命令"><a href="#redis基本命令" class="headerlink" title="redis基本命令"></a>redis基本命令</h1><pre><code># 启动systemctl start redis# 停止systemctl stop redis# 查看运行状态systemctl status redis# 重启systemctl restart redis# 开机启动systemctl enable redis# 开机禁用systemctl disable redis</code></pre><h2 id="命令行工具redis-cli基本使用验证"><a href="#命令行工具redis-cli基本使用验证" class="headerlink" title="命令行工具redis-cli基本使用验证"></a>命令行工具redis-cli基本使用验证</h2><pre><code># 启动redis-cliredis-cli </code></pre><p>#　redis-cli基本命令</p><pre><code>127.0.0.1:6379&gt; set msg &quot;hello world&quot;OK127.0.0.1:6379&gt; get msg&quot;hello world&quot;</code></pre><h1 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h1><h2 id="修改配置文件redis-conf"><a href="#修改配置文件redis-conf" class="headerlink" title="修改配置文件redis.conf"></a>修改配置文件redis.conf</h2><pre><code>vim /etc/redis.conf</code></pre><h1 id="开启远程连接-1"><a href="#开启远程连接-1" class="headerlink" title="开启远程连接"></a>开启远程连接</h1><pre><code>修改配置文件redis.confvim /etc/redis.conf</code></pre><h1 id="在阿里云控制台将redis默认端口6379-开放"><a href="#在阿里云控制台将redis默认端口6379-开放" class="headerlink" title="在阿里云控制台将redis默认端口6379 开放"></a>在阿里云控制台将redis默认端口6379 开放</h1>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate 复杂查询</title>
      <link href="/2019/06/25/hibernatehql/"/>
      <url>/2019/06/25/hibernatehql/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="hibernate-复杂查询"><a href="#hibernate-复杂查询" class="headerlink" title="hibernate 复杂查询"></a>hibernate 复杂查询</h1><h1 id="hibernate多表关联查询"><a href="#hibernate多表关联查询" class="headerlink" title="hibernate多表关联查询"></a>hibernate多表关联查询</h1><h2 id="表之间的关系分类"><a href="#表之间的关系分类" class="headerlink" title="表之间的关系分类"></a>表之间的关系分类</h2><blockquote><p>一对一<br>学生和学生卡<br>一对多<br>班级和学生<br>多对多<br>学生和老师<br>需要中间表 t_student_teacher</p></blockquote><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><pre class=" language-bash"><code class="language-bash">    核心异常：Caused by: org.hibernate.AnnotationException: @OneToOne or @ManyToOne on com.xiaomo.xxxx.model.yyy.Clock.user references an unknown entity: com.xiaomo.zzzz.model.user.User</code></pre><p>今天写一个Action 通过 HQL 查询一个表 出现异常 “More than one row with the given identifier was found”</p><p>问题原因： 数据库出现数据异常 存在多条主键不唯一的数据 (看来ORACLE也会出BUG呀)</p><p>问题解决： 找到数据库表 删除全部数据 然后重新导入 问题没了</p><h1 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h1><pre class=" language-bash"><code class="language-bash">@OneToOne<span class="token punctuation">(</span>fetch<span class="token operator">=</span>FetchType.LAZY<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习hibernate</title>
      <link href="/2019/06/25/hibernate-kuang-jia/"/>
      <url>/2019/06/25/hibernate-kuang-jia/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="学习hibernate"><a href="#学习hibernate" class="headerlink" title="学习hibernate"></a>学习hibernate</h1><h2 id="一、什么是hibernate框架"><a href="#一、什么是hibernate框架" class="headerlink" title="一、什么是hibernate框架"></a>一、什么是hibernate框架</h2><ol><li>hibernate是一个开源的对象映射框架</li><li>hibernate可以实现数据库中表和实体类的映射关系，自动生成sql语句并执行（全自动）</li><li>hibernate是一个全自动（自动生成sql）的持久层框架，可以采用面向对象的方式来对数据库进行CRUD操作<h2 id="二、hibernate的使用"><a href="#二、hibernate的使用" class="headerlink" title="二、hibernate的使用"></a>二、hibernate的使用</h2><pre class=" language-bash"><code class="language-bash">@Id//主键@Column<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_id"</span><span class="token punctuation">)</span>//定义一个序列@SequenceGenerator<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"gen"</span>,sequenceName <span class="token operator">=</span> <span class="token string">"seq_t_ssh_user"</span>,allocationSize <span class="token operator">=</span> 1<span class="token punctuation">)</span>//    自增策略@GeneratedValue<span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">"gen"</span>,strategy <span class="token operator">=</span> GenerationType.SEQUENCE<span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven+spring+Struts+hibernate整合</title>
      <link href="/2019/06/25/spring-struts-hibernate-zheng-he/"/>
      <url>/2019/06/25/spring-struts-hibernate-zheng-he/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-Struts-hibernate整合"><a href="#spring-Struts-hibernate整合" class="headerlink" title="spring+Struts+hibernate整合"></a>spring+Struts+hibernate整合</h1><h2 id="一、pom-xml配置-properties节点和dependencies节点"><a href="#一、pom-xml配置-properties节点和dependencies节点" class="headerlink" title="一、pom.xml配置 properties节点和dependencies节点"></a>一、pom.xml配置 properties节点和dependencies节点</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span>spring.version<span class="token operator">></span>4.3.22.RELEASE<span class="token operator">&lt;</span>/spring.version<span class="token operator">></span>    <span class="token operator">&lt;</span>struts.version<span class="token operator">></span>2.3.35<span class="token operator">&lt;</span>/struts.version<span class="token operator">></span>    <span class="token operator">&lt;</span>hibernate.version<span class="token operator">></span>5.0.6.Final<span class="token operator">&lt;</span>/hibernate.version<span class="token operator">></span>    <span class="token operator">&lt;</span>maven.compiler.source<span class="token operator">></span>1.8<span class="token operator">&lt;</span>/maven.compiler.source<span class="token operator">></span>    <span class="token operator">&lt;</span>maven.compiler.target<span class="token operator">></span>1.8<span class="token operator">&lt;</span>/maven.compiler.target<span class="token operator">></span>    <span class="token operator">&lt;</span>project.build.sourceEncoding<span class="token operator">></span>UTF-8<span class="token operator">&lt;</span>/project.build.sourceEncoding<span class="token operator">></span>  <span class="token operator">&lt;</span>/properties<span class="token operator">></span>  <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** Java Servlet API 4.0.0-b01 ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javax.servlet<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>javax.servlet-api<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>4.0.0-b01<span class="token operator">&lt;</span>/version<span class="token operator">></span>      <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span>/scope<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javax.servlet<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jstl<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>1.2<span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** JUnit 4.12 ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>4.12<span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** Fastjson 1.2.7 ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com.alibaba<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>fastjson<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>1.2.31<span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** AspectJ Weaver 1.8.7 ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.aspectj<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aspectjweaver<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>1.8.7<span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** Apache Log4j 1.2.17 ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>log4j<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>log4j<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>1.2.17<span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** Struts 2.3.24.1 ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.apache.struts<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>struts2-core<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${struts.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span>--因为hibernate里也javassist这个包，所以要排除，不然会冲突--<span class="token operator">></span>      <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>        <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javassist<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>javassist<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>/exclusion<span class="token operator">></span>      <span class="token operator">&lt;</span>/exclusions<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>--struts2-spring-plugin struts和spring整合插件--<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.apache.struts<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>struts2-spring-plugin<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${struts.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>--struts2-convention-plugin 使用注解的方式配置Action--<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.apache.struts<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>struts2-convention-plugin<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${struts.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.apache.struts<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>struts2-json-plugin<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${struts.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** Java Transaction API 1.1 ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javax.transaction<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jta<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>1.1<span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** Oracle 10.2.0.4.0 ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com.oracle<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>ojdbc14<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>10.2.0.4.0<span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** Druid 1.0.16 ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com.alibaba<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>1.0.16<span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** Hibernate 5.0.6.Final ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.hibernate<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>hibernate-core<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${hibernate.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.hibernate<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>hibernate-ehcache<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${hibernate.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- ********************** Spring 4.3.22.RELEASE ********************** --<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-core<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${spring.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-beans<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${spring.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-context<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${spring.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-web<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${spring.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-orm<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${spring.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-test<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token variable">${spring.version}</span><span class="token operator">&lt;</span>/version<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>/dependencies<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hibernate </tag>
            
            <tag> maven </tag>
            
            <tag> spring </tag>
            
            <tag> Struts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的部署到发布</title>
      <link href="/2019/06/23/bo-ke-de-bu-shu-dao-fa-bu-wen-zhang/"/>
      <url>/2019/06/23/bo-ke-de-bu-shu-dao-fa-bu-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h1><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"postName"</span> <span class="token comment" spellcheck="true">#新建文章</span>hexo new page <span class="token string">"pageName"</span> <span class="token comment" spellcheck="true">#新建页面</span>hexo generate <span class="token comment" spellcheck="true">#生成静态页面至public目录</span>hexo server <span class="token comment" spellcheck="true">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>hexo deploy <span class="token comment" spellcheck="true">#部署到GitHub</span>hexo <span class="token function">help</span>  <span class="token comment" spellcheck="true"># 查看帮助</span>hexo version  <span class="token comment" spellcheck="true">#查看Hexo的版本</span>``<span class="token variable"><span class="token variable">`</span> <span class="token function">bash</span>    缩写：<span class="token variable">`</span></span>`` <span class="token function">bash</span>hexo n <span class="token operator">==</span> hexo newhexo g <span class="token operator">==</span> hexo generatehexo s <span class="token operator">==</span> hexo serverhexo d <span class="token operator">==</span> hexo deploy</code></pre><h2 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h2><pre class=" language-bash"><code class="language-bash">hexo s -g <span class="token comment" spellcheck="true">#生成并本地预览</span>hexo d -g <span class="token comment" spellcheck="true">#生成并上传</span>使用<span class="token operator">&amp;&amp;</span>组合命令：hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s</code></pre><h2 id="安装hexo-deployer-git工具"><a href="#安装hexo-deployer-git工具" class="headerlink" title="安装hexo-deployer-git工具"></a>安装hexo-deployer-git工具</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git -save。</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客文章</title>
      <link href="/2019/06/23/di-yi-pian-bo-ke-wen-zhang/"/>
      <url>/2019/06/23/di-yi-pian-bo-ke-wen-zhang/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h1><p><font size="5">在新建好hexo+GitHub主题博客后我发现自己居然忘了怎么新建文章所以特地写一篇文章记录一下</font></p><h2 id="二-首先用命令生成一篇文章"><a href="#二-首先用命令生成一篇文章" class="headerlink" title="二 首先用命令生成一篇文章"></a>二 首先用命令生成一篇文章</h2><pre><code>hexo new 文章标题</code></pre><p><font size="4">生成的文件在你hexo的初始化路径下的source文件夹中<br>默认取名为文章的标题加上.md为后缀</font></p><h2 id="三-使用-什么工具编写hexo格式的文章"><a href="#三-使用-什么工具编写hexo格式的文章" class="headerlink" title="三 使用 什么工具编写hexo格式的文章"></a>三 使用 什么工具编写hexo格式的文章</h2><p><font size="4">推荐使用<a href="http://markdownpad.com/download.html" title="MarkdownPad" target="_blank" rel="noopener">MarkdownPad</a></font></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><font size="4">MarkdownPad语法和html语法有些类似</font></p><pre class=" language-html"><code class="language-html">如：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>修饰一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>修饰二级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></code></pre><p><font size="4">修饰代码块</font><br></p><pre class=" language-bash"><code class="language-bash"><span class="token string">" ``` bash "</span> 开始 <span class="token string">" ``` "</span> 结束  这个符号一般在键盘的ESC键下方</code></pre><blockquote><p>注：在第一个bash前要加空格 bash是样式，一般第二行开始粘贴代码</p></blockquote><h2 id="修饰标题"><a href="#修饰标题" class="headerlink" title="修饰标题"></a>修饰标题</h2><pre class=" language-bash"><code class="language-bash"><span class="token string">"# 修饰一级标题"</span><span class="token string">"## 修饰二级标题"</span><span class="token string">"### 修饰三级标题"</span><span class="token string">"#### 修饰四级标题"</span></code></pre><h2 id="修饰a链接"><a href="#修饰a链接" class="headerlink" title="修饰a链接"></a>修饰a链接</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>显示在html上的文字<span class="token punctuation">]</span><span class="token punctuation">(</span>http://markdownpad.com/download.html <span class="token string">"鼠标移到链接上时显示的内容"</span><span class="token punctuation">)</span></code></pre><pre><code>*这里是文字*_这里是文字_**这里是文字*****这里是文字***~~这里是文字~~</code></pre><h2 id="如何打出一些特殊符号"><a href="#如何打出一些特殊符号" class="headerlink" title="如何打出一些特殊符号"></a>如何打出一些特殊符号</h2><p>对于 Markdown 中的语法符号，前面加反斜线\即可显示符号本身。</p><pre><code>如：&quot;\^&quot; \^    &quot;\#&quot; \#    &quot;\&amp;&quot; \&amp;</code></pre><h2 id="博客上传"><a href="#博客上传" class="headerlink" title="博客上传"></a>博客上传</h2><p>博客文章写好后需要上传到GitHub中<br></p><ol><li>如果是第一次上传需要去配置相应的ssh密匙</li><li>配置好后就可以通过 “hexo d”命令来上传<blockquote><p>注：hexo d 命令需要安装对应的依赖</p></blockquote>##如果不是第一次上传的话需要注意</li><li>确保自己本地的项目GitHub上下载下来的hexo进行修改的</li><li>在通过 “hexo clean &amp;&amp; hexo g &amp;&amp; hexo d”组合命令进行上传</li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
